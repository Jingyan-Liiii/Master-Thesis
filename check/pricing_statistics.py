#!/usr/bin/env python2

import sys
import os
import argparse

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Define global variables
params = {}

def parse_arguments(args):
    """
    Parse the command-line arguments
    :param args: Command-line arguments provided during execution
    :return: Parsed argumetns
    """
    parser = argparse.ArgumentParser()

    parser.add_argument('-o', '--outdir', type=str,
                        default="plots",
                        help='output directory (default: "plots")')

    parser.add_argument('filename', nargs='+',
                        help='Name of the files to be used for the creating the bound plots')

    parsed_args = parser.parse_args(args)
    return parsed_args

def set_params(args):
    """
    Set the global parameters from the parsed command-line arguments
    :param args: parsed command-line arguments
    :return:
    """
    params['outdir'] = args.outdir

def generate_files(files):
    """
    Parse the files and generate the plots
    :param files: List of files to be parsed
    :return:
    """
    for file in files:
        with open(file) as _file:
            # initialize all index-lists
            ind_node = []
            ind_pricing_round = []
            ind_stab_round = []
            ind_pricing_prob = []

            # initialize the value-lists
            val_time = []
            val_nVars = []

            # initialize all counters
            node = 0
            pricing_round = 0
            stab_round = 0
            pricing_prob = 0

            # initialize all other variables
            problemFileName = None

            for line in _file:
                # if the file is a out-file, generated by the check-script, reset the variables, whenever a new instance starts
                if line.startswith("@01"):
                    # initialize all index-lists
                    ind_node = []
                    ind_pricing_round = []
                    ind_stab_round = []
                    ind_pricing_prob = []

                    # initialize the value-lists
                    val_time = []
                    val_nVars = []

                    # initialize all counters
                    node = 0
                    pricing_round = 0
                    stab_round = 0
                    pricing_prob = 0

                    # initialize all other variables
                    problemFileName = None

                elif not problemFileName and line.startswith("read problem "):
                    # get the problem name from the file name as in "check.awk"
                    tmparray = line.split("<")[-1].replace(">","").replace("\n","").split("/")[-1].split(".")
                    problemFileName = tmparray[0]
                    if tmparray[-1] == "gz" or tmparray[-1] == "z" or tmparray[-1] == "GZ" or tmparray[-1] == "Z":
                        tmparray.pop()
                    for i in range(1,len(tmparray)-1):
                        problemFileName += "." + tmparray[i]

                # pricer statistics end
                elif line.startswith("SCIP Status        :"):
                    index = pd.MultiIndex.from_arrays([ind_node, ind_pricing_round, ind_stab_round, ind_pricing_prob],
                                                      names=["node", "pricing round", "stab round", "pricing prob"])
                    data = {'time': val_time, 'nVars': val_nVars}
                    df = pd.DataFrame(data=data, index = index)

                # ignore all other lines, that do not contain pricer statistics messages
                elif not line.startswith("[src/pricer_gcg.cpp:"):
                    continue

                # ignore lines, where the output ends abrubtly
                if line.find("@0")==-1:
                    continue

                message = line.split("] statistic: ")[-1]

                if message.startswith("New pricing round at node"):
                    node = int(message.split()[-1])
                    pricing_round += 1

                elif message.startswith("Stabilization round "):
                    stab_round = int(message.split()[-1])

                elif message.startswith("Pricing prob "):
                    pricing_prob = int(message.split()[2])

                    # store all indices
                    ind_node.append(node)
                    ind_pricing_round.append(pricing_round)
                    ind_stab_round.append(stab_round)
                    ind_pricing_prob.append(pricing_prob)

                    # store the data
                    val_time.append(float(message.split()[-1]))
                    val_nVars.append(int(message.split()[5]))

def main():
    """Entry point when calling this script"""
    args = sys.argv[1:]
    parsed_args = parse_arguments(args)
    set_params(parsed_args)
    if not os.path.exists(params['outdir']):
        os.makedirs(params['outdir'])
    generate_files(parsed_args.filename)

# Calling main script
if __name__ == '__main__':
    main()
